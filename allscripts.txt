// app.js:
// Initialize Firebase services
var auth = firebase.auth();
var db = firebase.firestore();

// Add Firestore settings if needed (optional)
db.settings({ timestampsInSnapshots: true });

// User settings (default values)
var userSettings = {
  firstAppearanceDaysCorrect: 28,
  firstAppearanceDaysIncorrect: 0.0035, // 5 minutes in days
  repeatDaysCorrectMultiplier: 2,
  repeatDaysIncorrect: 0.0035 // 5 minutes in days
};

// Monitor auth state
auth.onAuthStateChanged(user => {
  if (user) {
    console.log('User logged in:', user.email);
    saveUserData(user);

    // Load user settings
    loadUserSettings().then(() => {
      // Load question if on practice page
      if (window.location.pathname.endsWith('practice.html')) {
        loadQuestion();
      }
    });
  } else {
    console.log('User logged out');
    // Redirect to login if not authenticated
    if (!window.location.pathname.endsWith('login.html')) {
      window.location.href = 'login.html';
    }
  }
});

// Google Sign-In
function googleLogin() {
  var provider = new firebase.auth.GoogleAuthProvider();
  auth.signInWithPopup(provider)
    .then(result => {
      console.log('Google Sign-In successful:', result.user);

      // Save user data to Firestore
      saveUserData(result.user);

      window.location.href = 'course_selection.html';
    })
    .catch(error => {
      console.error('Google Sign-In error:', error);
    });
}

// Email Link Authentication
function emailLogin() {
  var email = prompt('Please enter your email:');
  var actionCodeSettings = {
    url: window.location.origin + '/course_selection.html',
    handleCodeInApp: true,
  };
  auth.sendSignInLinkToEmail(email, actionCodeSettings)
    .then(() => {
      window.localStorage.setItem('emailForSignIn', email);
      alert('A sign-in link has been sent to your email.');
    })
    .catch(error => {
      console.error('Email Sign-In error:', error);
    });
}

// Function to save user data to Firestore
function saveUserData(user) {
    var userRef = db.collection('users').doc(user.uid);
    userRef.set({
      email: user.email,
      displayName: user.displayName,
      lastLogin: firebase.firestore.Timestamp.now()
    }, { merge: true })
    .then(() => {
      console.log('User data saved successfully');
    })
    .catch(error => {
      console.error('Error saving user data:', error);
    });
  }
  

// Complete Email Link Sign-In
if (auth.isSignInWithEmailLink(window.location.href)) {
  var email = window.localStorage.getItem('emailForSignIn');
  if (!email) {
    email = prompt('Please provide your email for confirmation');
  }
  auth.signInWithEmailLink(email, window.location.href)
    .then(result => {
      window.localStorage.removeItem('emailForSignIn');
      console.log('Email Sign-In successful:', result.user);
      window.location.href = 'course_selection.html';
    })
    .catch(error => {
      console.error('Email Sign-In error:', error);
    });
}

// Function to load user settings
function loadUserSettings() {
  return new Promise((resolve, reject) => {
    var user = auth.currentUser;
    db.collection('users').doc(user.uid).collection('settings').doc('appSettings').get()
      .then(doc => {
        if (doc.exists) {
          userSettings = doc.data();
          console.log('User settings loaded:', userSettings);
        } else {
          console.log('No user settings found, using defaults.');
        }
        resolve();
      })
      .catch(error => {
        console.error('Error loading user settings:', error);
        reject(error);
      });
  });
}

// Load a question
function loadQuestion() {
  var user = auth.currentUser;

  // Get user's known and target languages
  db.collection('users').doc(user.uid).get()
    .then(userDoc => {
      var userData = userDoc.data();
      if (!userData || !userData.knownLanguage || !userData.targetLanguage) {
        window.location.href = 'course_selection.html';
        return;
      }

      // Get due questions
      db.collection('users').doc(user.uid).collection('progress')
        .where('nextDue', '<=', new Date())
        .orderBy('nextDue')
        .limit(1)
        .get()
        .then(progressSnapshot => {
          if (!progressSnapshot.empty) {
            // Load the due question
            var progressDoc = progressSnapshot.docs[0];
            var questionId = progressDoc.id;
            loadQuestionData(questionId);
          } else {
            // Load a new question
            loadNewQuestion(userData);
          }
        });
    });
}

// Load question data and display
function loadQuestionData(questionId) {
  db.collection('questions').doc(questionId).get()
    .then(questionDoc => {
      if (questionDoc.exists) {
        displayQuestion(questionDoc.data(), questionId);
      } else {
        console.error('Question not found:', questionId);
      }
    });
}

// Load a new question
function loadNewQuestion(userData) {
  // Fetch a random question that the user hasn't seen yet
  db.collection('questions')
    .where('language', '==', userData.targetLanguage)
    .where('knownLanguage', '==', userData.knownLanguage)
    .get()
    .then(questionSnapshot => {
      var questions = [];
      questionSnapshot.forEach(doc => {
        questions.push({ id: doc.id, data: doc.data() });
      });

      // Filter out questions the user has already seen
      db.collection('users').doc(auth.currentUser.uid).collection('progress').get()
        .then(progressSnapshot => {
          var seenQuestions = progressSnapshot.docs.map(doc => doc.id);
          var unseenQuestions = questions.filter(q => !seenQuestions.includes(q.id));

          if (unseenQuestions.length > 0) {
            // Pick a random unseen question
            var randomQuestion = unseenQuestions[Math.floor(Math.random() * unseenQuestions.length)];
            displayQuestion(randomQuestion.data, randomQuestion.id);
          } else {
            console.log('No new questions available.');
            // Optionally, you can restart or inform the user
          }
        });
    });
}

// Display the question
function displayQuestion(questionData, questionId) {
  $('#sentence').text(questionData.sentence);
  $('#translation').text(questionData.translation);
  $('#missing-word-translation').text(questionData.missingWordTranslation.join(', '));
  $('#answer').val('');
  $('#feedback').text('');
  $('#submit-answer').off('click').on('click', function() {
    var userAnswer = $('#answer').val().trim();
    checkAnswer(userAnswer, questionData, questionId);
  });
}

// Check the user's answer
function checkAnswer(userAnswer, questionData, questionId) {
  var correctAnswer = questionData.missingWord.toLowerCase();
  var isCorrect = userAnswer.toLowerCase() === correctAnswer;

  // Update feedback
  $('#feedback').text(isCorrect ? 'Correct!' : `Incorrect. The correct answer was "${correctAnswer}".`);

  // Update user progress
  updateUserProgress(questionId, isCorrect);
}

// Update user progress in the database
function updateUserProgress(questionId, isCorrect) {
  var user = auth.currentUser;
  var userProgressRef = db.collection('users').doc(user.uid).collection('progress').doc(questionId);

  db.runTransaction(transaction => {
    return transaction.get(userProgressRef).then(doc => {
      var data = doc.exists ? doc.data() : {
        timesCorrect: 0,
        timesIncorrect: 0,
        timesCorrectInARow: 0,
        lastAnswered: null,
        nextDue: null,
        initialAppearance: true
      };

      var now = new Date();

      if (isCorrect) {
        data.timesCorrect += 1;
        data.timesCorrectInARow += 1;
        var daysToAdd;
        if (data.initialAppearance) {
          daysToAdd = userSettings.firstAppearanceDaysCorrect;
        } else {
          daysToAdd = userSettings.repeatDaysCorrectMultiplier * data.timesCorrectInARow;
        }
        data.nextDue = new Date(now.getTime() + daysToAdd * 24 * 60 * 60 * 1000);
      } else {
        data.timesIncorrect += 1;
        data.timesCorrectInARow = 0;
        var minutesToAdd = userSettings.firstAppearanceDaysIncorrect * 24 * 60;
        data.nextDue = new Date(now.getTime() + minutesToAdd * 60 * 1000);
      }

      data.lastAnswered = now;
      data.initialAppearance = false;

      transaction.set(userProgressRef, data);

      // Optionally, update overall stats
      var userStatsRef = db.collection('users').doc(user.uid).collection('stats').doc('overall');
      transaction.get(userStatsRef).then(statsDoc => {
        var statsData = statsDoc.exists ? statsDoc.data() : {
          totalQuestions: 0,
          correctAnswers: 0,
          incorrectAnswers: 0
        };
        statsData.totalQuestions += 1;
        if (isCorrect) {
          statsData.correctAnswers += 1;
        } else {
          statsData.incorrectAnswers += 1;
        }
        transaction.set(userStatsRef, statsData);
      });
    });
  }).then(() => {
    // Load the next question after a short delay
    setTimeout(loadQuestion, 2000);
  }).catch(error => {
    console.error('Transaction failed:', error);
  });
}

// Logout function
function logout() {
  auth.signOut().then(() => {
    window.location.href = 'login.html';
  });
}


// auth.js:
// auth.js

// Initialize Firebase Authentication
var auth = firebase.auth();

// Google Sign-In
function googleLogin() {
  var provider = new firebase.auth.GoogleAuthProvider();
  auth.signInWithPopup(provider)
    .then(result => {
      console.log('Google Sign-In successful:', result.user);
      saveUserData(result.user);
      window.location.href = 'course_selection.html';
    })
    .catch(error => {
      console.error('Google Sign-In error:', error);
    });
}

// Save user data to Firestore
function saveUserData(user) {
  var userRef = db.collection('users').doc(user.uid);
  userRef.set({
    email: user.email,
    displayName: user.displayName,
    lastLogin: firebase.firestore.Timestamp.now()
  }, { merge: true })
  .then(() => {
    console.log('User data saved successfully');
  })
  .catch(error => {
    console.error('Error saving user data:', error);
  });
}

// Logout function
function logout() {
  auth.signOut().then(() => {
    window.location.href = 'login.html';
  });
}


// combineFiles.js:
const fs = require('fs');
const path = require('path');

// Define the output file
const outputFilePath = path.join(__dirname, 'allscripts.txt');

// Function to combine files
const combineFiles = () => {
  // Clear or create the output file
  fs.writeFileSync(outputFilePath, '', 'utf8');

  // Read all files in the current directory
  fs.readdir(__dirname, (err, files) => {
    if (err) throw err;

    // Filter only .html, .js, and .css files
    const targetFiles = files.filter(file => /\.(html|js|css)$/.test(file));

    targetFiles.forEach(file => {
      // Get the file content
      const content = fs.readFileSync(path.join(__dirname, file), 'utf8');
      const header = `// ${file}:\n`;

      // Append file name and content to the output file
      fs.appendFileSync(outputFilePath, header + content + '\n\n', 'utf8');
    });

    console.log(`All files have been combined into ${outputFilePath}`);
  });
};

// Run the combineFiles function
combineFiles();


// course_selection.html:
<!-- course_selection.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Select Course - Language Learning App</title>
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
  <!-- Custom CSS -->
  <link rel="stylesheet" href="main.css">
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="#">LanguageApp</a>
    <button class="btn btn-outline-danger ml-auto" onclick="logout()">Logout</button>
  </nav>
  <!-- Main Content -->
  <div class="container">
    <h2 class="mt-5">Select a Course</h2>
    <div class="form-group">
      <label for="known-language">Known Language</label>
      <select id="known-language" class="form-control">
        <option value="en">English</option>
        <!-- Add more options -->
      </select>
    </div>
    <div class="form-group">
      <label for="target-language">Target Language</label>
      <select id="target-language" class="form-control">
        <option value="es">Spanish</option>
        <option value="de">German</option>
        <!-- Add more options -->
      </select>
    </div>
    <button id="start-practice" class="btn btn-success">Start Practicing</button>
  </div>
  <!-- Firebase and jQuery -->
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <!-- Firebase SDKs -->
  <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-auth.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-firestore.js"></script>
  <script src="firebase-config.js"></script>
  <!-- Custom JS -->
  <script src="app.js"></script>
  <script>
    $(document).ready(function() {
      $('#start-practice').click(function() {
        var knownLanguage = $('#known-language').val();
        var targetLanguage = $('#target-language').val();
        var user = firebase.auth().currentUser;

        if (!user) {
          console.error("User is not authenticated.");
          return;
        }

        var courseId = `${knownLanguage}-${targetLanguage}`; // e.g., "en-de"

        // Save the selected course to Firestore
        db.collection('users').doc(user.uid).set({
          currentCourse: courseId, // Save the current course
          knownLanguage: knownLanguage,
          targetLanguage: targetLanguage
        }, { merge: true }).then(() => {
          // Redirect to the practice page after saving
          window.location.href = 'practice.html';
        }).catch(error => {
          console.error('Error saving course data:', error);
        });
      });
    });
  </script>
  
</body>
</html>


// document_viewer.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Viewer - Backend</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="main.css">
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">Document Viewer</a>
    </nav>
    
    <!-- Main Content -->
    <div class="container mt-5">
        <h2>Firestore Document Viewer</h2>
        <div class="form-group">
            <label for="collection-select">Select Collection</label>
            <select id="collection-select" class="form-control">
                <!-- Manually add known collections -->
                <option value="users">users</option>
                <option value="questions">questions</option>
                <option value="courses">courses</option>
                <!-- Add more known collections as needed -->
            </select>
        </div>
        <div class="form-group">
            <label for="document-select">Select Document</label>
            <select id="document-select" class="form-control">
                <!-- Options will be dynamically populated -->
            </select>
        </div>
        <div class="form-group">
            <label for="subcollection-select">Known Sub-Collections (Optional)</label>
            <input type="text" id="subcollection-select" class="form-control" placeholder="Enter sub-collections separated by commas (e.g., progress,stats)">
        </div>
        <button id="view-document" class="btn btn-primary">View Document</button>
        <pre id="document-output" class="mt-4 p-3 bg-light border"></pre>
    </div>

    <!-- Firebase and jQuery -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-firestore.js"></script>
    <script src="firebase-config.js"></script>
    
    <script>
        // Initialize Firestore
        var db = firebase.firestore();

        $(document).ready(function () {
            $('#collection-select').change(loadDocuments);
            $('#view-document').click(viewDocument);
            loadDocuments(); // Load documents for the initial collection
        });

        function loadDocuments() {
            var collectionId = $('#collection-select').val();
            db.collection(collectionId).get().then(snapshot => {
                $('#document-select').empty(); // Clear previous options
                snapshot.forEach(doc => {
                    $('#document-select').append(`<option value="${doc.id}">${doc.id}</option>`);
                });
            }).catch(error => {
                console.error('Error fetching documents:', error);
            });
        }

        function viewDocument() {
            var collectionId = $('#collection-select').val();
            var documentId = $('#document-select').val();
            var subCollectionsInput = $('#subcollection-select').val();
            var subCollections = subCollectionsInput.split(',').map(item => item.trim()).filter(Boolean);

            if (!collectionId || !documentId) {
                alert('Please select both a collection and a document.');
                return;
            }

            fetchDocumentData(collectionId, documentId, subCollections).then(data => {
                $('#document-output').text(JSON.stringify(data, null, 2));
            }).catch(error => {
                console.error('Error fetching document:', error);
                $('#document-output').text('Error fetching document data.');
            });
        }

        async function fetchDocumentData(collectionId, documentId, subCollections) {
            const docRef = db.collection(collectionId).doc(documentId);
            const docSnap = await docRef.get();

            if (!docSnap.exists) {
                throw new Error('Document not found.');
            }

            const data = docSnap.data();
            data['_id'] = documentId; // Include document ID in the output

            // Fetch specified sub-collections
            for (const subCollection of subCollections) {
                data[subCollection] = {};
                const subCollectionSnap = await db.collection(`${collectionId}/${documentId}/${subCollection}`).get();
                subCollectionSnap.forEach(subDoc => {
                    data[subCollection][subDoc.id] = subDoc.data();
                });
            }

            return data;
        }
    </script>
</body>
</html>


// firebase-config.js:
// Initialize Firebase with the CDN
const firebaseConfig = {
    
    authDomain: "languizy2.firebaseapp.com",
    projectId: "languizy2",
    storageBucket: "languizy2.appspot.com",
    messagingSenderId: "628938129894",
    appId: "1:628938129894:web:d59633ea173be552e55627",
    measurementId: "G-2L0H1T02HS"
  };
  
  // Initialize Firebase App
  firebase.initializeApp(firebaseConfig);
  
  // Initialize Firebase Analytics not needed for now
//   firebase.analytics();

// game.js:
// Initialize Firestore
var db = firebase.firestore();
var dailyScore = 0;
var debounceTimeout = null; // Use a debounce timeout instead of a boolean flag

// Check for user authentication state
firebase.auth().onAuthStateChanged(function (user) {
  if (user) {
    fetchCurrentCourse(user).then((currentCourse) => {
      if (!currentCourse) {
        console.error('No current course found.');
        window.location.href = 'course_selection.html';
        return;
      }
      loadDailyScore(user, currentCourse); // Fetch and display daily score
      loadQuestion(user, currentCourse);
    });
  } else {
    // No user is signed in, redirect to login
    window.location.href = 'login.html';
  }
});

// Function to fetch the current course from Firestore
function fetchCurrentCourse(user) {
  return new Promise((resolve, reject) => {
    db.collection('users').doc(user.uid).get().then((doc) => {
      if (doc.exists && doc.data().currentCourse) {
        resolve(doc.data().currentCourse);
      } else {
        resolve(null);
      }
    }).catch((error) => {
      console.error('Error fetching current course:', error);
      reject(error);
    });
  });
}

// Function to load daily score from Firestore
function loadDailyScore(user, currentCourse) {
  var today = new Date().toISOString().split('T')[0]; // Get date in yyyy-mm-dd format

  // Fetch user's current course information from the "courses" sub-collection
  var userStatsRef = db.collection('users').doc(user.uid)
    .collection('courses').doc(currentCourse)
    .collection('stats').doc(today);

  // Fetch today's stats
  userStatsRef.get().then(doc => {
    if (doc.exists) {
      dailyScore = doc.data().score || 0; // Load the score from Firestore
    } else {
      dailyScore = 0; // If no score for today, initialize it
    }
    $('#score').text(dailyScore); // Display the current daily score
  }).catch(error => {
    console.error('Error loading daily score:', error);
  });
}

// Load a question from Firestore
function loadQuestion(user, currentCourse) {
  showLoadingProgress();

  if (!user) {
    console.error("User is not authenticated.");
    return;
  }

  if (!currentCourse) {
    console.error('User has not selected a course.');
    window.location.href = 'course_selection.html';
    return;
  }

  // Fetch the due questions based on scheduling algorithm
  db.collection('users').doc(user.uid)
    .collection('courses').doc(currentCourse)
    .collection('progress')
    .where('nextDue', '<=', new Date())
    .orderBy('nextDue')
    .limit(1)
    .get()
    .then(progressSnapshot => {
      if (!progressSnapshot.empty) {
        // Load the due question
        var progressDoc = progressSnapshot.docs[0];
        var questionId = progressDoc.id;
        loadQuestionData(questionId);
      } else {
        // No due questions; attempt to load a new question
        loadNewQuestion(user, currentCourse);
      }
    }).catch(error => {
      console.error('Error fetching due questions:', error);
    });
}

// Load question data and display
function loadQuestionData(questionId) {
  db.collection('questions').doc(questionId).get()
    .then(questionDoc => {
      if (questionDoc.exists) {
        displayQuestion(questionDoc.data(), questionId);
      } else {
        console.error('Question not found:', questionId);
      }
    });
}

// Show loading progress
function showLoadingProgress() {
    $('#loading-progress').show();
    $('#question-area').hide(); // Hide the question area
    $('#progress-bar').css('width', '0%');
  
    let width = 0;
    const interval = setInterval(() => {
      width += 20;
      $('#progress-bar').css('width', `${width}%`);
      if (width >= 100) {
        width = 0;
      }
    }, 500); // Increase every 500ms
  
    // Save the interval ID to stop it later
    $('#loading-progress').data('interval', interval);
  }
  
  // Hide loading progress
  function hideLoadingProgress() {
    $('#loading-progress').hide();
    clearInterval($('#loading-progress').data('interval'));
    $('#question-area').show(); // Show the question area
  }

// Load a new question that hasn't been answered yet or from a specific course
function loadNewQuestion(user, courseId) {
  // Fetch user's selected course details (knownLanguage and targetLanguage)
  db.collection('users').doc(user.uid).collection('courses').doc(courseId).get().then(courseDoc => {
    var courseData = courseDoc.data();
    if (!courseData || !courseData.knownLanguage || !courseData.targetLanguage) {
      console.error('User has not selected a course.');
      window.location.href = 'course_selection.html';
      return;
    }

    // Fetch all questions for the relevant course (language pair)
    db.collection('questions')
      .where('language', '==', courseData.targetLanguage)
      .where('knownLanguage', '==', courseData.knownLanguage)
      .get()
      .then(questionSnapshot => {
        var questions = [];
        questionSnapshot.forEach(doc => {
          questions.push({ id: doc.id, data: doc.data() });
        });

        // Filter out questions the user has already answered
        db.collection('users').doc(user.uid)
          .collection('courses').doc(courseId)
          .collection('progress').get()
          .then(progressSnapshot => {
            var seenQuestions = progressSnapshot.docs.map(doc => doc.id);
            var unseenQuestions = questions.filter(q => !seenQuestions.includes(q.id));

            if (unseenQuestions.length > 0) {
              // Pick a random unseen question
              var randomQuestion = unseenQuestions[Math.floor(Math.random() * unseenQuestions.length)];
              displayQuestion(randomQuestion.data, randomQuestion.id);
            } else {
              console.log('No new questions available.');
              loadNextEarlyQuestion(user, courseId); // Load the next question even if it's not yet due
            }
          });
      });
  }).catch(error => {
    console.error('Error loading user course data:', error);
  });
}

// Load the next question even if it's not yet due
function loadNextEarlyQuestion(user, courseId) {
  db.collection('users').doc(user.uid)
    .collection('courses').doc(courseId)
    .collection('progress')
    .orderBy('nextDue')
    .limit(1)
    .get()
    .then(progressSnapshot => {
      if (!progressSnapshot.empty) {
        var progressDoc = progressSnapshot.docs[0];
        var questionId = progressDoc.id;
        loadQuestionData(questionId);
      } else {
        console.log('No questions found at all.');
      }
    }).catch(error => {
      console.error('Error fetching next early question:', error);
    });
}

// Display the question on the page
function displayQuestion(question, questionId) {
  hideLoadingProgress(); // Hide progress bar when the question loads

  var inputLength = question.missingWord.length;

  // Calculate input width dynamically to match the expected answer length
  var inputWidth = inputLength * 1.2 + 1;

  // Replace the missing word with an input field
  var inputHTML = `<input type="text" id="user-answer" class="fill-in-blank" maxlength="${inputLength}" style="width: ${inputWidth}ch;">`;
  var sentenceHTML = question.sentence.replace('____', inputHTML);

  // Display the sentence with the embedded input field
  $('#sentence').html(sentenceHTML);
  $('#translation').text(question.translation);

  // Retrieve the progress data for this question to get `lastAnswered`
  var user = firebase.auth().currentUser;
  var userProgressRef = db.collection('users').doc(user.uid)
    .collection('courses').doc(currentCourse)
    .collection('progress').doc(questionId);

  userProgressRef.get().then(progressDoc => {
    var phraseStatus = "(new phrase)"; // Default if never answered before

    if (progressDoc.exists) {
      var progressData = progressDoc.data();
      if (progressData.lastAnswered) {
        // Calculate time difference for display
        phraseStatus = timeDifference(progressData.lastAnswered);
      }
    }

    // Display the phrase status
    $('#translation').append(` <span class="text-muted">${phraseStatus}</span>`);

    // Automatically focus on the input field
    $('#user-answer').focus();
  });

  $('#feedback').text('').removeClass('text-success text-danger');

  // Show the submit button, hide the next button
  $('#submit-answer').show();
  $('#next-question').hide();

  // Debounce handler to prevent multiple triggers
  function handleDebounce(callback) {
    if (!debounceTimeout) {
      callback(); // Execute the callback function immediately

      // Set debounceTimeout to prevent further triggers
      debounceTimeout = setTimeout(() => {
        debounceTimeout = null; // Reset after 300ms
      }, 300); // Debounce time set to 300ms
    }
  }

  // Handle answer submission
  function handleSubmit() {
    var userAnswer = $('#user-answer').val().trim();
    checkAnswer(userAnswer, question, questionId);
    $('#submit-answer').hide(); // Hide submit button after submission
    $('#next-question').show(); // Show next question button after submission
  }

  // Event listener for Enter key to submit answer
  $('#user-answer').off('keypress').on('keypress', function (e) {
    if (e.which === 13 && $('#submit-answer').is(':visible')) { // Enter key pressed and submit button visible
      handleDebounce(handleSubmit);
    }
  });

  // Handle submit answer button click
  $('#submit-answer').off('click').on('click', function () {
    handleDebounce(handleSubmit);
  });

  // Handle next question button click
  $('#next-question').off('click').on('click', function () {
    handleDebounce(() => loadQuestion(user, currentCourse));
  });

  // Event listener for Enter key to move to the next question
  $(document).off('keypress').on('keypress', function (e) {
    if (e.which === 13 && $('#next-question').is(':visible')) { // Enter key pressed and next button visible
      handleDebounce(() => $('#next-question').click());
    }
  });
}

// Normalization function to ignore special characters
function normalizeString(str) {
  return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
}

// Check user's answer
function checkAnswer(userAnswer, question, questionId) {
  var correctAnswer = normalizeString(question.missingWord);
  var normalizedUserAnswer = normalizeString(userAnswer);

  var isCorrect = normalizedUserAnswer === correctAnswer;

  if (isCorrect) {
    $('#feedback').text('Correct!').removeClass('text-danger').addClass('text-success');
    updateUserProgress(questionId, true);
  } else {
    $('#feedback').text(`Incorrect. The correct answer was "${question.missingWord}".`).removeClass('text-success').addClass('text-danger');
    updateUserProgress(questionId, false);
  }
}

// Update user progress in the database
function updateUserProgress(questionId, isCorrect) {
  var user = firebase.auth().currentUser;

  fetchCurrentCourse(user).then((currentCourse) => {
    var userProgressRef = db.collection('users').doc(user.uid)
      .collection('courses').doc(currentCourse)
      .collection('progress').doc(questionId);

    db.collection('users').doc(user.uid).collection('courses').doc(currentCourse).get().then(courseDoc => {
      var courseData = courseDoc.data();
      var courseId = `${courseData.knownLanguage}-${courseData.targetLanguage}`;
      var userStatsRef = db.collection('users').doc(user.uid)
        .collection('courses').doc(currentCourse)
        .collection('stats');

      db.runTransaction(transaction => {
        return transaction.get(userProgressRef).then(doc => {
          var data = doc.exists ? doc.data() : {
            timesCorrect: 0,
            timesIncorrect: 0,
            timesCorrectInARow: 0,
            lastAnswered: null,
            nextDue: null,
            initialAppearance: true
          };

          var now = new Date();
          var today = now.toISOString().split('T')[0]; // Get date in yyyy-mm-dd format

          if (isCorrect) {
            data.timesCorrect += 1;
            data.timesCorrectInARow += 1;
            var daysToAdd = data.initialAppearance ? 28 : 2 * data.timesCorrectInARow;
            data.nextDue = new Date(now.getTime() + daysToAdd * 24 * 60 * 60 * 1000);
            updateStats(userStatsRef, today, 10, true, courseId);
            dailyScore += 10; // Update the daily score
          } else {
            data.timesIncorrect += 1;
            data.timesCorrectInARow = 0;
            data.nextDue = new Date(now.getTime() + 5 * 60 * 1000); // 5 minutes
            updateStats(userStatsRef, today, 0, false, courseId);
          }

          // Update `lastAnswered` to the current time
          data.lastAnswered = firebase.firestore.Timestamp.fromDate(now);
          data.initialAppearance = false;

          transaction.set(userProgressRef, data);
        });
      }).catch(error => {
        console.error('Transaction failed:', error);
      });
    });
  });
}

// Update stats in the database
function updateStats(userStatsRef, date, score, isCorrect, courseId) {
  var dailyStatsRef = userStatsRef.doc(date);
  var allTimeStatsRef = userStatsRef.doc('all-time');

  db.runTransaction(transaction => {
    return transaction.get(dailyStatsRef).then(dailyDoc => {
      return transaction.get(allTimeStatsRef).then(allTimeDoc => {
        // Process daily stats
        var dailyData = dailyDoc.exists ? dailyDoc.data() : {
          correctAnswers: 0,
          wrongAnswers: 0,
          totalDrills: 0,
          score: 0
        };

        dailyData.totalDrills += 1;
        dailyData.score += score;

        if (isCorrect) {
          dailyData.correctAnswers += 1;
        } else {
          dailyData.wrongAnswers += 1;
        }

        // Process all-time stats
        var allTimeData = allTimeDoc.exists ? allTimeDoc.data() : {
          totalCorrectAnswers: 0,
          totalWrongAnswers: 0,
          totalDrills: 0,
          totalScore: 0
        };

        allTimeData.totalDrills += 1;
        allTimeData.totalScore += score;

        if (isCorrect) {
          allTimeData.totalCorrectAnswers += 1;
        } else {
          allTimeData.totalWrongAnswers += 1;
        }

        // Write both sets of stats after all reads
        transaction.set(dailyStatsRef, dailyData);
        transaction.set(allTimeStatsRef, allTimeData);

        return Promise.resolve(); // Indicate the transaction is complete
      });
    });
  }).then(() => {
    console.log('Stats updated successfully');
  }).catch(error => {
    console.error('Transaction failed:', error);
  });
}

// Helper function to calculate time difference
function timeDifference(lastAnswered) {
  if (!lastAnswered) {
    return "(new phrase)";
  }

  const now = new Date();
  const diff = now - lastAnswered.toDate(); // Calculate time difference in milliseconds

  const seconds = Math.floor(diff / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);
  const weeks = Math.floor(days / 7);
  const months = Math.floor(days / 30);
  const years = Math.floor(days / 365);

  if (years > 0) {
    return `(shown last ${years} year${years > 1 ? 's' : ''} ago)`;
  } else if (months > 0) {
    return `(shown last ${months} month${months > 1 ? 's' : ''} ago)`;
  } else if (weeks > 0) {
    return `(shown last ${weeks} week${weeks > 1 ? 's' : ''} ago)`;
  } else if (days > 0) {
    return `(shown last ${days} day${days > 1 ? 's' : ''} ago)`;
  } else if (hours > 0) {
    return `(shown last ${hours} hour${hours > 1 ? 's' : ''} ago)`;
  } else if (minutes > 0) {
    return `(shown last ${minutes} minute${minutes > 1 ? 's' : ''} ago)`;
  } else {
    return "(new phrase)";
  }
}


// index.html:
<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Language Learning App</title>
  <!-- Redirect Script -->
  <script>
    window.location.href = 'login.html';
  </script>
</head>
<body>
</body>
</html>


// login.html:
<!-- login.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Login - Language Learning App</title>
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
  <!-- Custom CSS -->
  <link rel="stylesheet" href="main.css">
</head>
<body>
  <div class="container">
    <h2 class="mt-5">Login</h2>
    <button id="google-login" class="btn btn-primary">Login with Google</button>
    <button id="email-login" class="btn btn-secondary">Login with Email</button>
  </div>
  <!-- Firebase and jQuery -->
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <!-- Firebase SDKs -->
  <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-auth.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-firestore.js"></script>
  <script src="firebase-config.js"></script>
  <!-- Custom JS -->
  <script src="app.js"></script>
  <script>
    $('#google-login').click(googleLogin);
    $('#email-login').click(emailLogin);
  </script>
</body>
</html>


// main.css:
/* main.css */

body {
    padding-top: 56px;
    background-color: #f8f9fa;
    font-family: 'Arial', sans-serif;
  }
  
  .navbar {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .question-area h2 {
    font-size: 2rem;
    font-weight: bold;
  }
  
  .question-area p {
    font-size: 1.2rem;
    color: #555;
  }
  
  .input-group .form-control-inline {
    display: inline-block;
    width: 200px;
  }
  
  .special-characters button {
    margin: 0 5px;
  }
  
  #feedback {
    font-size: 1rem;
    margin-top: 15px;
  }
  
  .btn {
    font-size: 1rem;
    padding: 10px 20px;
  }
  
  .correct-answer {
    color: green;
  }
  
  .incorrect-answer {
    color: red;
  }
  
  /* Progress bar styling */
  #loading-progress {
    height: 4px;
    margin-top: -20px;
  }
  
  .progress-bar {
    transition: width 1s ease-in-out;
  }
  

// populateFirestore.js:
// populateFirestore.js

const admin = require('firebase-admin');

// Replace with the path to your service account key JSON file
const serviceAccount = require('/Users/kobyofek/Development/languizy2/serviceAccountKey.json');

// Initialize Firebase Admin SDK
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

async function populateDatabase() {
  try {
    const questions = [
      {
        sentence: 'Ich hatte noch nie einen echten ____ gesehen.',
        translation: 'I had never seen a real elephant.',
        missingWord: 'Elefanten',
        missingWordTranslation: ['elephant'],
        language: 'de',
        knownLanguage: 'en'
      },
      {
        sentence: 'Das ____ ist sehr weit entfernt.',
        translation: 'The airport is very far away.',
        missingWord: 'Flughafen',
        missingWordTranslation: ['airport'],
        language: 'de',
        knownLanguage: 'en'
      },
      {
        sentence: 'Ich habe mein ____ vergessen.',
        translation: 'I forgot my umbrella.',
        missingWord: 'Regenschirm',
        missingWordTranslation: ['umbrella'],
        language: 'de',
        knownLanguage: 'en'
      },
      {
        sentence: 'Er hat das ____ auf den Tisch gelegt.',
        translation: 'He placed the book on the table.',
        missingWord: 'Buch',
        missingWordTranslation: ['book'],
        language: 'de',
        knownLanguage: 'en'
      },
      {
        sentence: 'Das ____ ist im Park.',
        translation: 'The dog is in the park.',
        missingWord: 'Hund',
        missingWordTranslation: ['dog'],
        language: 'de',
        knownLanguage: 'en'
      },
      {
        sentence: 'Ich brauche eine ____ für das Rezept.',
        translation: 'I need a recipe for the recipe.',
        missingWord: 'Zutat',
        missingWordTranslation: ['ingredient'],
        language: 'de',
        knownLanguage: 'en'
      },
      {
        sentence: 'Er fährt mit dem ____ zur Arbeit.',
        translation: 'He commutes to work by bicycle.',
        missingWord: 'Fahrrad',
        missingWordTranslation: ['bicycle'],
        language: 'de',
        knownLanguage: 'en'
      },
      {
        sentence: 'Das ____ war sehr teuer.',
        translation: 'The meal was very expensive.',
        missingWord: 'Essen',
        missingWordTranslation: ['meal'],
        language: 'de',
        knownLanguage: 'en'
      },
      {
        sentence: 'Wir haben das ____ verloren.',
        translation: 'We lost the game.',
        missingWord: 'Spiel',
        missingWordTranslation: ['game'],
        language: 'de',
        knownLanguage: 'en'
      },
      {
        sentence: 'Das ____ im Wald ist alt.',
        translation: 'The house in the forest is old.',
        missingWord: 'Haus',
        missingWordTranslation: ['house'],
        language: 'de',
        knownLanguage: 'en'
      }
    ];

    // Add each question to the "questions" collection
    for (let i = 0; i < questions.length; i++) {
      const question = questions[i];
      await db.collection('questions').add(question);
      console.log(`Question ${i + 1} added successfully!`);
    }
  } catch (error) {
    console.error('Error adding data:', error);
  }
}

populateDatabase();



// practice.html:
<!-- practice.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Practice - Language Learning App</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
  <link rel="stylesheet" href="main.css">
</head>
<body>
  <!-- Navigation -->
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="#">LanguageApp</a>
    <button class="btn btn-outline-danger ml-auto" onclick="logout()">Logout</button>
  </nav>

  <!-- Main Content -->
  <div class="container text-center mt-5">
    <!-- Display Language Flags and Score -->
    <div class="d-flex justify-content-between align-items-center mb-4">
      <div>
        <img src="assets/icons/german-flag.png" alt="German" width="32">
        <img src="assets/icons/us-flag.png" alt="English" width="32">
      </div>
      <div>
        <span>Score: </span><span id="score">0</span>
      </div>
    </div>

    <!-- Progress Bar -->
    <div id="loading-progress" class="progress mt-2" style="display: none;">
      <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%;" id="progress-bar"></div>
    </div>

    <!-- Question Area -->
<div class="question-area mb-4" id="question-area">
    <h2 id="sentence" class="mb-3">Loading...</h2>
    <p id="translation" class="text-muted"></p>
  
    <!-- Feedback Area -->
    <p id="feedback" class="mt-3"></p>
  
    <!-- Submit Answer Button -->
    <button class="btn btn-primary mt-3" id="submit-answer">Submit Answer</button>
  
    <!-- Next Question Button -->
    <button class="btn btn-success mt-3" id="next-question" style="display:none;">Next Question</button>
  </div>
  

    <!-- Characters for Special Input -->
    <div class="special-characters mb-3">
      <button class="btn btn-light" onclick="addCharacter('ä')">ä</button>
      <button class="btn btn-light" onclick="addCharacter('ö')">ö</button>
      <button class="btn btn-light" onclick="addCharacter('ü')">ü</button>
      <button class="btn btn-light" onclick="addCharacter('ß')">ß</button>
    </div>

    <!-- Stats and Other Controls -->
    <div class="d-flex justify-content-between mt-4">
      <button class="btn btn-info">Help</button>
      <button class="btn btn-secondary">Stats</button>
      <button class="btn btn-danger">Report</button>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-auth.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-firestore.js"></script>
  <script src="firebase-config.js"></script>
  <script src="auth.js"></script>
  <script src="game.js"></script>
</body>
</html>


// results.html:


// settings.html:
<!-- settings.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Settings - Language Learning App</title>
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
  <!-- Custom CSS -->
  <link rel="stylesheet" href="main.css">
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="#">LanguageApp</a>
    <button class="btn btn-outline-danger ml-auto" onclick="logout()">Logout</button>
  </nav>
  <!-- Main Content -->
  <div class="container">
    <h2 class="mt-5">Settings</h2>
    <form id="settings-form">
      <div class="form-group">
        <label for="firstAppearanceDaysCorrect">First Appearance Days (Correct)</label>
        <input type="number" class="form-control" id="firstAppearanceDaysCorrect" value="28">
      </div>
      <div class="form-group">
        <label for="firstAppearanceDaysIncorrect">First Appearance Days (Incorrect in minutes)</label>
        <input type="number" class="form-control" id="firstAppearanceDaysIncorrect" value="5">
      </div>
      <div class="form-group">
        <label for="repeatDaysCorrectMultiplier">Repeat Days Correct Multiplier</label>
        <input type="number" class="form-control" id="repeatDaysCorrectMultiplier" value="2">
      </div>
      <div class="form-group">
        <label for="repeatDaysIncorrect">Repeat Days Incorrect (in minutes)</label>
        <input type="number" class="form-control" id="repeatDaysIncorrect" value="5">
      </div>
      <button type="submit" class="btn btn-primary">Save Settings</button>
    </form>
  </div>
  <!-- Firebase and jQuery -->
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <!-- Firebase SDKs -->
  <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-auth.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-firestore.js"></script>
  <script src="firebase-config.js"></script>
  <!-- Custom JS -->
  <script src="app.js"></script>
  <script>
    $(document).ready(function() {
      // Load current settings
      var user = auth.currentUser;
      var settingsRef = db.collection('users').doc(user.uid).collection('settings').doc('appSettings');
      settingsRef.get().then(doc => {
        if (doc.exists) {
          var settings = doc.data();
          $('#firstAppearanceDaysCorrect').val(settings.firstAppearanceDaysCorrect);
          $('#firstAppearanceDaysIncorrect').val(settings.firstAppearanceDaysIncorrect * 24 * 60);
          $('#repeatDaysCorrectMultiplier').val(settings.repeatDaysCorrectMultiplier);
          $('#repeatDaysIncorrect').val(settings.repeatDaysIncorrect * 24 * 60);
        }
      });

      // Save settings
      $('#settings-form').submit(function(e) {
        e.preventDefault();
        var settingsData = {
          firstAppearanceDaysCorrect: parseFloat($('#firstAppearanceDaysCorrect').val()),
          firstAppearanceDaysIncorrect: parseFloat($('#firstAppearanceDaysIncorrect').val()) / (24 * 60),
          repeatDaysCorrectMultiplier: parseFloat($('#repeatDaysCorrectMultiplier').val()),
          repeatDaysIncorrect: parseFloat($('#repeatDaysIncorrect').val()) / (24 * 60)
        };
        settingsRef.set(settingsData).then(() => {
          alert('Settings saved.');
          // Update local userSettings
          userSettings = settingsData;
        }).catch(error => {
          console.error('Error saving settings:', error);
        });
      });
    });
  </script>
</body>
</html>


// stats.html:
<!-- stats.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Stats - Language Learning App</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
  <link rel="stylesheet" href="main.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <!-- Navigation -->
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="#">LanguageApp</a>
    <button class="btn btn-outline-danger ml-auto" onclick="logout()">Logout</button>
  </nav>

  <!-- Main Content -->
  <div class="container mt-5">
    <h2>Statistics</h2>
    <canvas id="dailyStatsChart" width="400" height="200"></canvas>
    <canvas id="allTimeStatsChart" width="400" height="200" class="mt-5"></canvas>
  </div>

  <!-- Scripts -->
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-auth.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-firestore.js"></script>
  <script src="firebase-config.js"></script>
  <script src="auth.js"></script>
  <script src="stats.js"></script>
</body>
</html>


// stats.js:
// stats.js

// Initialize Firestore
var db = firebase.firestore();

firebase.auth().onAuthStateChanged(function(user) {
  if (user) {
    loadStats(user);
  } else {
    window.location.href = 'login.html';
  }
});

function loadStats(user) {
  var userStatsRef = db.collection('users').doc(user.uid).collection('stats');

  // Fetch stats for all courses
  userStatsRef.get().then(snapshot => {
    snapshot.forEach(doc => {
      var courseId = doc.id;
      loadCourseStats(user, courseId);
    });
  });
}

function loadCourseStats(user, courseId) {
  var courseStatsRef = db.collection('users').doc(user.uid).collection('stats').doc(courseId);

  // Fetch daily stats for the last 30 days
  courseStatsRef.collection(courseId).orderBy('date', 'desc').limit(30).get().then(snapshot => {
    var dailyStats = [];
    snapshot.forEach(doc => {
      var data = doc.data();
      if (doc.id !== 'all-time') {
        dailyStats.push({
          date: doc.id,
          correctAnswers: data.correctAnswers,
          wrongAnswers: data.wrongAnswers,
          score: data.score,
          totalDrills: data.totalDrills
        });
      }
    });

    displayDailyStatsChart(dailyStats, courseId);
  });

  // Fetch all-time stats
  courseStatsRef.collection(courseId).doc('all-time').get().then(doc => {
    if (doc.exists) {
      displayAllTimeStatsChart(doc.data(), courseId);
    }
  });
}

function displayDailyStatsChart(data, courseId) {
  var ctx = document.getElementById('dailyStatsChart').getContext('2d');
  new Chart(ctx, {
    type: 'line',
    data: {
      labels: data.map(stat => stat.date),
      datasets: [{
        label: `Correct Answers (${courseId})`,
        data: data.map(stat => stat.correctAnswers),
        borderColor: 'green',
        fill: false
      }, {
        label: `Wrong Answers (${courseId})`,
        data: data.map(stat => stat.wrongAnswers),
        borderColor: 'red',
        fill: false
      }, {
        label: `Score (${courseId})`,
        data: data.map(stat => stat.score),
        borderColor: 'blue',
        fill: false
      }, {
        label: `Total Drills (${courseId})`,
        data: data.map(stat => stat.totalDrills),
        borderColor: 'orange',
        fill: false
      }]
    }
  });
}

function displayAllTimeStatsChart(data, courseId) {
  var ctx = document.getElementById('allTimeStatsChart').getContext('2d');
  new Chart(ctx, {
    type: 'bar',
    data: {
      labels: ['Total Correct', 'Total Wrong', 'Total Drills', 'Total Score'],
      datasets: [{
        label: `All Time Stats (${courseId})`,
        data: [data.totalCorrectAnswers, data.totalWrongAnswers, data.totalDrills, data.totalScore],
        backgroundColor: ['green', 'red', 'orange', 'blue']
      }]
    }
  });
}


